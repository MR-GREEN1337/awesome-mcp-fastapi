{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Awesome MCP FastAPI","text":"Production-Ready MCP Implementation with FastAPI Superpowers <p>A modern, high-performance implementation of the Model Context Protocol that leverages FastAPI's mature ecosystem for better developer experience and enhanced capabilities.</p> Get Started GitHub"},{"location":"#why-awesome-mcp-fastapi","title":"Why Awesome MCP FastAPI?","text":"<p>The Model Context Protocol provides a solid foundation for connecting AI models with tools and data sources, but our implementation offers several significant advantages:</p> \ud83d\ude80 Production-Ready <p>Built on FastAPI, a high-performance, modern web framework with automatic OpenAPI documentation generation.</p> \ud83e\udde9 Dependency Injection <p>Leverage FastAPI's powerful dependency injection system for more maintainable and testable code.</p> \ud83d\udd04 Middleware Support <p>Easy integration with authentication, monitoring, and other middleware components.</p> \u2705 Built-in Validation <p>Pydantic integration for robust request/response validation and data modeling.</p> \u26a1 Async Support <p>First-class support for async/await patterns for high-concurrency applications.</p> \ud83d\udcda Enhanced Documentation <p>Automatic documentation in both MCP and OpenAPI formats with rich type information.</p>"},{"location":"#enhanced-tool-registry","title":"Enhanced Tool Registry","text":"<p>Our implementation improves upon the standard MCP tool registry with:</p> <ul> <li>Automatic Documentation Generation: Tools are automatically documented in both MCP format and OpenAPI specification.</li> <li>Improved Type Hints: Enhanced type information extraction for better tooling and IDE support.</li> <li>Richer Schema Definitions: More expressive JSON Schema definitions for tool inputs and outputs.</li> <li>Better Error Handling: Structured error responses with detailed information.</li> <li>Enhanced Docstring Support: Better extraction of documentation from Python docstrings.</li> </ul>"},{"location":"#getting-started-is-simple","title":"Getting Started is Simple","text":"<pre><code>from fastapi import FastAPI\nfrom awesome_mcp_fastapi import auto_tool, bind_app_tools\n\napp = FastAPI()\nbind_app_tools(app)\n\n@auto_tool(\n    name=\"calculator\",\n    description=\"Perform basic arithmetic operations\",\n    tags=[\"math\"]\n)\n@app.post(\"/api/calculator\")\nasync def calculator(operation: str, a: float, b: float):\n    \"\"\"\n    Perform basic arithmetic operations.\n\n    Parameters:\n    - operation: The operation to perform (add, subtract, multiply, divide)\n    - a: First number\n    - b: Second number\n\n    Returns:\n    The result of the operation\n    \"\"\"\n    if operation == \"add\":\n        return {\"result\": a + b}\n    elif operation == \"subtract\":\n        return {\"result\": a - b}\n    # ... more operations\n</code></pre>"},{"location":"#real-world-use-cases","title":"Real-World Use Cases","text":"<ul> <li>AI-Powered Applications: Easily expose your application's capabilities to AI models.</li> <li>Enterprise Systems: Production-ready implementation with security, authentication, and monitoring.</li> <li>Development Tools: Create powerful development tools with automatic documentation.</li> <li>Data Analysis Tools: Expose data analysis capabilities to LLMs for more intelligent insights.</li> </ul>"},{"location":"#community-and-support","title":"Community and SupportReady to supercharge your AI tools?","text":"<ul> <li>Join our Discord community</li> <li>Star us on GitHub</li> <li>Follow our Twitter for updates</li> </ul> <p>Get started with Awesome MCP FastAPI today and experience the difference!</p> Get Started"},{"location":"comparison/vs-standard-mcp/","title":"vs Standard MCP","text":""},{"location":"comparison/vs-standard-mcp/#feature-comparison","title":"Feature Comparison","text":""},{"location":"comparison/vs-standard-mcp/#web-framework","title":"Web Framework","text":"<ul> <li>Awesome MCP FastAPI: FastAPI with full middleware, dependency injection</li> <li>Standard MCP Python SDK: Basic HTTP handlers</li> <li>Advantage: \u2705 More production features</li> </ul>"},{"location":"comparison/vs-standard-mcp/#api-documentation","title":"API Documentation","text":"<ul> <li>Awesome MCP FastAPI: Auto-generated OpenAPI + MCP spec</li> <li>Standard MCP Python SDK: MCP spec only</li> <li>Advantage: \u2705 Dual documentation</li> </ul>"},{"location":"comparison/vs-standard-mcp/#input-validation","title":"Input Validation","text":"<ul> <li>Awesome MCP FastAPI: Pydantic models with rich validation</li> <li>Standard MCP Python SDK: Basic schema validation</li> <li>Advantage: \u2705 More robust validation</li> </ul>"},{"location":"comparison/vs-standard-mcp/#error-handling","title":"Error Handling","text":"<ul> <li>Awesome MCP FastAPI: Structured errors with status codes</li> <li>Standard MCP Python SDK: Basic error responses</li> <li>Advantage: \u2705 Better error reporting</li> </ul>"},{"location":"comparison/vs-standard-mcp/#dependency-injection","title":"Dependency Injection","text":"<ul> <li>Awesome MCP FastAPI: Full FastAPI DI system</li> <li>Standard MCP Python SDK: None</li> <li>Advantage: \u2705 More maintainable code</li> </ul>"},{"location":"comparison/vs-standard-mcp/#performance","title":"Performance","text":"<ul> <li>Awesome MCP FastAPI: High (Starlette/Uvicorn)</li> <li>Standard MCP Python SDK: Moderate</li> <li>Advantage: \u2705 Better performance</li> </ul>"},{"location":"comparison/vs-standard-mcp/#testing-support","title":"Testing Support","text":"<ul> <li>Awesome MCP FastAPI: TestClient + pytest fixtures</li> <li>Standard MCP Python SDK: Basic testing</li> <li>Advantage: \u2705 Easier testing</li> </ul>"},{"location":"comparison/vs-standard-mcp/#schema-generation","title":"Schema Generation","text":"<ul> <li>Awesome MCP FastAPI: Enhanced schema with examples and descriptions</li> <li>Standard MCP Python SDK: Basic schema</li> <li>Advantage: \u2705 Richer schemas</li> </ul>"},{"location":"comparison/vs-standard-mcp/#tool-discovery","title":"Tool Discovery","text":"<ul> <li>Awesome MCP FastAPI: Automatic route scanning + decorators</li> <li>Standard MCP Python SDK: Manual registration</li> <li>Advantage: \u2705 Automatic discovery</li> </ul>"},{"location":"comparison/vs-standard-mcp/#cors-support","title":"CORS Support","text":"<ul> <li>Awesome MCP FastAPI: Built-in</li> <li>Standard MCP Python SDK: Limited</li> <li>Advantage: \u2705 Web-friendly</li> </ul>"},{"location":"comparison/vs-standard-mcp/#authentication","title":"Authentication","text":"<ul> <li>Awesome MCP FastAPI: Multiple auth schemes</li> <li>Standard MCP Python SDK: Basic</li> <li>Advantage: \u2705 More secure</li> </ul>"},{"location":"comparison/vs-standard-mcp/#asgi-middleware","title":"ASGI Middleware","text":"<ul> <li>Awesome MCP FastAPI: Full support</li> <li>Standard MCP Python SDK: None</li> <li>Advantage: \u2705 More extensible</li> </ul>"},{"location":"comparison/vs-standard-mcp/#architecture-comparison","title":"Architecture Comparison","text":"Standard MCP Architecture <ul> <li>Simple handlers for MCP protocol</li> <li>Basic HTTP server</li> <li>Manual tool registration</li> <li>Limited middleware</li> </ul> Awesome MCP FastAPI Architecture <ul> <li>FastAPI route system with type hints</li> <li>High-performance ASGI server</li> <li>Automatic tool discovery</li> <li>Full middleware stack</li> <li>Enhanced schema generation</li> </ul>"},{"location":"comparison/vs-standard-mcp/#tool-registration-comparison","title":"Tool Registration Comparison","text":""},{"location":"comparison/vs-standard-mcp/#standard-mcp-python","title":"Standard MCP Python","text":"<pre><code>from mcp.server import Server\n\napp = Server(\"example-server\")\n\n@app.tool()\nasync def calculator(operation: str, a: float, b: float) -&gt; float:\n    \"\"\"Simple calculator.\"\"\"\n    if operation == \"add\":\n        return a + b\n    # etc...\n</code></pre>"},{"location":"comparison/vs-standard-mcp/#awesome-mcp-fastapi","title":"Awesome MCP FastAPI","text":"<pre><code>from fastapi import FastAPI\nfrom awesome_mcp_fastapi import auto_tool, bind_app_tools\n\napp = FastAPI()\nbind_app_tools(app)\n\n@auto_tool(\n    name=\"calculator\",\n    description=\"Perform basic arithmetic operations\",\n    tags=[\"math\"]\n)\n@app.post(\"/api/calculator\")\nasync def calculator(operation: str, a: float, b: float):\n    \"\"\"\n    Perform basic arithmetic operations.\n\n    Parameters:\n    - operation: The operation to perform (add, subtract, multiply, divide)\n    - a: First number\n    - b: Second number\n\n    Returns:\n    The result of the operation\n    \"\"\"\n    if operation == \"add\":\n        return {\"result\": a + b}\n    # etc...\n</code></pre>"},{"location":"comparison/vs-standard-mcp/#schema-generation-comparison","title":"Schema Generation Comparison","text":"Standard MCP Schema Awesome MCP FastAPI Schema <pre><code>{\n  \"name\": \"calculator\",\n  \"description\": \"Simple calculator.\",\n  \"inputSchema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"operation\": {\"type\": \"string\"},\n      \"a\": {\"type\": \"number\"},\n      \"b\": {\"type\": \"number\"}\n    }\n  }\n}\n</code></pre> <pre><code>{\n  \"name\": \"calculator\",\n  \"description\": \"Perform basic arithmetic operations\",\n  \"inputSchema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"operation\": {\n        \"type\": \"string\",\n        \"description\": \"The operation to perform (add, subtract, multiply, divide)\",\n        \"examples\": [\"add\", \"subtract\"]\n      },\n      \"a\": {\n        \"type\": \"number\",\n        \"description\": \"First number\",\n        \"examples\": [5]\n      },\n      \"b\": {\n        \"type\": \"number\",\n        \"description\": \"Second number\",\n        \"examples\": [3]\n      }\n    },\n    \"required\": [\"operation\", \"a\", \"b\"],\n    \"example\": {\n      \"operation\": \"add\",\n      \"a\": 5,\n      \"b\": 3\n    }\n  },\n  \"outputSchema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"result\": {\n        \"type\": \"number\",\n        \"description\": \"The result of the operation\"\n      }\n    },\n    \"example\": {\n      \"result\": 8\n    }\n  },\n  \"tags\": [\"math\"]\n}\n</code></pre>"},{"location":"comparison/vs-standard-mcp/#benefits-in-production","title":"Benefits in Production","text":"<p>When running in production, Awesome MCP FastAPI provides several critical advantages:</p>"},{"location":"comparison/vs-standard-mcp/#performance_1","title":"Performance","text":"<p>*Based on benchmarks with 10,000 concurrent requests</p>"},{"location":"comparison/vs-standard-mcp/#security","title":"Security","text":"<ul> <li>Full integration with security middleware</li> <li>OAuth2 authentication support</li> <li>Rate limiting and IP filtering</li> <li>Request validation at the edge</li> <li>CORS protection and security headers</li> </ul>"},{"location":"comparison/vs-standard-mcp/#observability","title":"Observability","text":"<ul> <li>Prometheus metrics integration</li> <li>Structured logging with correlation IDs</li> <li>OpenTelemetry tracing</li> <li>Health check endpoints</li> <li>Detailed error reporting</li> </ul>"},{"location":"comparison/vs-standard-mcp/#developer-experience","title":"Developer Experience","text":"<ul> <li>Swagger UI for manual testing</li> <li>ReDoc for API documentation</li> <li>Automatic schema validation</li> <li>Type checking at development time</li> <li>Consistent with FastAPI patterns</li> </ul>"},{"location":"comparison/vs-standard-mcp/#migration-guide","title":"Migration Guide","text":"<p>Migrating from standard MCP to Awesome MCP FastAPI is straightforward:</p> <ol> <li>Install the package with <code>pip install awesome-mcp-fastapi</code></li> <li>Create a FastAPI app</li> <li>Decorate your endpoints with <code>@auto_tool</code></li> <li>Bind tools to your app with <code>bind_app_tools(app)</code></li> <li>Run your FastAPI app with Uvicorn</li> </ol> <p>For detailed migration steps, see the Migration Guide.</p>"},{"location":"comparison/vs-standard-mcp/#conclusion","title":"Conclusion","text":"<p>While standard MCP provides a solid foundation, Awesome MCP FastAPI significantly enhances the developer experience, performance, and production-readiness of your MCP implementation. By leveraging the mature FastAPI ecosystem, you get the best of both worlds: full MCP compatibility with enterprise-grade web framework features.</p>"},{"location":"concepts/tool-registry/","title":"Enhanced Tool Registry","text":"<p>One of the core advantages of Awesome MCP FastAPI is its enhanced tool registry system, which automatically discovers, documents, and exposes your FastAPI endpoints as MCP tools.</p>"},{"location":"concepts/tool-registry/#how-it-works","title":"How It Works","text":"<p>The tool registry works through several key components:</p> <ol> <li>Decorator System: The <code>@auto_tool</code> decorator marks FastAPI endpoints as MCP tools</li> <li>Route Scanner: Automatically discovers all decorated endpoints in your application</li> <li>Schema Generator: Creates rich JSON schemas from Python type annotations and docstrings</li> <li>Registry API: Exposes tools through both FastAPI endpoints and MCP protocol interfaces</li> </ol>"},{"location":"concepts/tool-registry/#key-benefits","title":"Key Benefits","text":""},{"location":"concepts/tool-registry/#1-automatic-documentation-generation","title":"1. Automatic Documentation Generation","text":"<p>The tool registry automatically generates documentation in two formats:</p> <ul> <li>MCP Tool Schemas: Compatible with all MCP clients (like Claude)</li> <li>OpenAPI/Swagger: For human developers to explore and test</li> </ul> <p>This dual documentation approach ensures both AI models and humans can discover and understand your tools.</p>"},{"location":"concepts/tool-registry/#2-enhanced-type-information","title":"2. Enhanced Type Information","text":"<p>Unlike standard MCP, our tool registry extracts rich type information from:</p> <ul> <li>Function signatures: Parameter types and return types</li> <li>Pydantic models: All field types, constraints, and validations</li> <li>Field extra information: Examples, descriptions, and constraints</li> </ul> <p>This results in more accurate schema generation and better client experiences.</p>"},{"location":"concepts/tool-registry/#3-docstring-processing","title":"3. Docstring Processing","text":"<p>The registry intelligently processes Python docstrings to:</p> <ul> <li>Extract parameter descriptions</li> <li>Generate example values</li> <li>Document return values</li> <li>Provide usage notes</li> </ul>"},{"location":"concepts/tool-registry/#4-production-ready-features","title":"4. Production-Ready Features","text":"<ul> <li>Caching: Tool schemas are cached for performance</li> <li>Hot Reloading: New tools are discovered when added</li> <li>Error Handling: Robust error handling for schema generation</li> <li>Logging: Detailed logging for debugging</li> </ul>"},{"location":"concepts/tool-registry/#using-the-tool-registry","title":"Using the Tool Registry","text":""},{"location":"concepts/tool-registry/#binding-to-your-app","title":"Binding to Your App","text":"<p>First, bind the tool registry to your FastAPI app:</p> <pre><code>from fastapi import FastAPI\nfrom awesome_mcp_fastapi import bind_app_tools\n\napp = FastAPI()\nbind_app_tools(app)  # This registers the tool registry\n</code></pre> <p>This creates the following endpoints:</p> <ul> <li><code>/tools/all</code>: Lists all registered tools with their schemas</li> <li><code>/tools/scan</code>: Manually triggers a scan for new tools</li> </ul>"},{"location":"concepts/tool-registry/#marking-endpoints-as-tools","title":"Marking Endpoints as Tools","text":"<p>Use the <code>@auto_tool</code> decorator to mark FastAPI endpoints as MCP tools:</p> <pre><code>from awesome_mcp_fastapi import auto_tool\n\n@auto_tool(\n    name=\"tool-name\",             # Unique tool identifier\n    description=\"Tool description\", # Optional, falls back to docstring\n    tags=[\"category1\", \"category2\"], # Optional, for organization\n    example_input={\"param\": \"value\"}, # Optional example input\n    example_output={\"result\": \"value\"} # Optional example output\n)\n@app.post(\"/api/endpoint\")        # Regular FastAPI route decorator\nasync def my_endpoint(param1: str, param2: int):\n    \"\"\"\n    Endpoint docstring - will be used for documentation.\n\n    Will be parsed to extract parameter descriptions and examples.\n    \"\"\"\n    # Implementation\n    return {\"result\": \"value\"}\n</code></pre>"},{"location":"concepts/tool-registry/#tool-discovery-process","title":"Tool Discovery Process","text":"<p>The tool registry:</p> <ol> <li>Scans all routes in your FastAPI application</li> <li>Identifies routes decorated with <code>@auto_tool</code></li> <li>Analyzes function signatures and docstrings</li> <li>Generates input and output schemas</li> <li>Registers tools in the MCP protocol</li> <li>Exposes tool listing through the API</li> </ol>"},{"location":"concepts/tool-registry/#advanced-schema-generation","title":"Advanced Schema Generation","text":"<p>The schema generator has several advanced capabilities:</p> <pre><code>from pydantic import BaseModel, Field\nfrom enum import Enum\nfrom typing import List, Optional\n\nclass Status(str, Enum):\n    \"\"\"Processing status enum\"\"\"\n    PENDING = \"pending\"\n    PROCESSING = \"processing\"\n    COMPLETED = \"completed\"\n    FAILED = \"failed\"\n\nclass JobResult(BaseModel):\n    \"\"\"Result of a background job\"\"\"\n    id: str = Field(..., description=\"Unique job identifier\")\n    status: Status = Field(..., description=\"Current job status\")\n    progress: float = Field(0.0, description=\"Progress percentage\", ge=0.0, le=100.0)\n    results: Optional[List[str]] = Field(None, description=\"Job results if completed\")\n\n    class Config:\n        schema_extra = {\n            \"example\": {\n                \"id\": \"job_12345\",\n                \"status\": \"completed\",\n                \"progress\": 100.0,\n                \"results\": [\"result1\", \"result2\"]\n            }\n        }\n\n@auto_tool(\n    name=\"get-job-status\",\n    description=\"Check the status of a background job\",\n    tags=[\"jobs\"]\n)\n@app.get(\"/api/jobs/{job_id}\", response_model=JobResult)\nasync def get_job_status(job_id: str):\n    \"\"\"\n    Get the current status of a background job.\n\n    Parameters:\n    - job_id: The unique identifier of the job\n\n    Returns:\n    The current job status and results if completed.\n    \"\"\"\n    # Implementation\n    return JobResult(\n        id=job_id,\n        status=Status.COMPLETED,\n        progress=100.0,\n        results=[\"example result\"]\n    )\n</code></pre> <p>From this code, the registry will automatically generate:</p> <ul> <li>A rich input schema with the job_id parameter</li> <li>A complete output schema with all JobResult fields</li> <li>Proper Enum value handling</li> <li>Examples from the Pydantic Config</li> <li>Descriptions from Field definitions and docstrings</li> </ul>"},{"location":"concepts/tool-registry/#customizing-the-registry","title":"Customizing the Registry","text":"<p>You can customize the tool registry behavior with options:</p> <pre><code>bind_app_tools(\n    app,\n    prefix=\"/custom-path\",   # Custom endpoint prefix (default: /tools)\n    scan_on_startup=True,    # Auto-scan on startup\n    enable_api=True,         # Enable API endpoints\n    cache_ttl=60             # Schema cache TTL in seconds\n)\n</code></pre>"},{"location":"concepts/tool-registry/#internals-schema-processing","title":"Internals: Schema Processing","text":"<p>The tool registry employs sophisticated techniques to generate schemas:</p>"},{"location":"concepts/tool-registry/#input-schema-generation","title":"Input Schema Generation","text":"<ol> <li>Analyzes function parameters</li> <li>Identifies query, path, and body parameters</li> <li>Extracts types, defaults, and constraints</li> <li>Processes Pydantic models recursively</li> <li>Adds examples and descriptions</li> </ol>"},{"location":"concepts/tool-registry/#output-schema-generation","title":"Output Schema Generation","text":"<ol> <li>Identifies response_model from route decorators</li> <li>Falls back to return type annotations</li> <li>Processes Pydantic response models</li> <li>Extracts example responses</li> <li>Adds rich field descriptions</li> </ol>"},{"location":"concepts/tool-registry/#performance-considerations","title":"Performance Considerations","text":"<p>The tool registry is designed for production performance:</p> <ul> <li>Lazy Loading: Tools are scanned only when needed</li> <li>Caching: Schema generation results are cached</li> <li>Minimal Overhead: Negligible impact on request handling</li> <li>Optimized Processing: Efficient schema generation</li> </ul>"},{"location":"concepts/tool-registry/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about advanced tool patterns</li> <li>Understand schema generation details</li> <li>Explore integration with MCP clients</li> </ul>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>This guide will help you install and set up Awesome MCP FastAPI for your project.</p>"},{"location":"getting-started/installation/#system-requirements","title":"System Requirements","text":"<ul> <li>Python 3.10 or higher</li> <li>FastAPI 0.95.0 or higher</li> <li>Pydantic v2.0 or higher</li> </ul>"},{"location":"getting-started/installation/#installation-options","title":"Installation Options","text":""},{"location":"getting-started/installation/#option-1-using-uv-recommended","title":"Option 1: Using uv (Recommended)","text":"<p>uv is a fast Python package installer and resolver. If you don't have it installed, visit the uv installation page.</p> <pre><code># Clone the repository\ngit clone https://github.com/MR-GREEN1337/awesome-mcp-fastapi.git\ncd awesome-mcp-fastapi\n\n# Install with uv\nuv venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\nuv pip install -e .\n</code></pre>"},{"location":"getting-started/installation/#option-2-using-pip-with-requirementstxt","title":"Option 2: Using pip with requirements.txt","text":"<p>The project includes a requirements.txt file for easy installation:</p> <pre><code># Clone the repository\ngit clone https://github.com/MR-GREEN1337/awesome-mcp-fastapi.git\ncd awesome-mcp-fastapi\n\n# Install dependencies from requirements.txt\npip install -r requirements.txt\n</code></pre>"},{"location":"getting-started/installation/#option-3-direct-installation","title":"Option 3: Direct Installation","text":"<p>Install directly from the cloned repository:</p> <pre><code>git clone https://github.com/MR-GREEN1337/awesome-mcp-fastapi.git\ncd awesome-mcp-fastapi\npip install -e .\n</code></pre>"},{"location":"getting-started/installation/#development-installation","title":"Development Installation","text":"<p>For development work, install with development dependencies:</p> <pre><code># Using uv\nuv pip install -e \".[dev,test,doc]\"\n\n# Using pip\npip install -e \".[dev,test,doc]\"\n</code></pre>"},{"location":"getting-started/installation/#docker-installation","title":"Docker Installation","text":"<p>To use Awesome MCP FastAPI in a Docker container:</p> <pre><code>git clone https://github.com/MR-GREEN1337/awesome-mcp-fastapi.git\ncd awesome-mcp-fastapi\ndocker build -t awesome-mcp-fastapi .\ndocker run -p 8000:8000 awesome-mcp-fastapi\n</code></pre>"},{"location":"getting-started/installation/#quick-verification","title":"Quick Verification","text":"<p>After installation, verify that everything is working correctly:</p> <pre><code>from fastapi import FastAPI\nfrom awesome_mcp_fastapi import auto_tool, bind_app_tools\n\n# This should run without errors\napp = FastAPI()\nbind_app_tools(app)\n\n@auto_tool(name=\"hello\", description=\"Say hello\")\n@app.get(\"/hello\")\ndef hello(name: str = \"World\"):\n    return {\"message\": f\"Hello, {name}!\"}\n</code></pre>"},{"location":"getting-started/installation/#configuration","title":"Configuration","text":""},{"location":"getting-started/installation/#environment-variables","title":"Environment Variables","text":"<p>Awesome MCP FastAPI supports the following environment variables:</p> Variable Description Default <code>AWESOME_MCP_LOG_LEVEL</code> Logging level <code>INFO</code> <code>AWESOME_MCP_SCAN_ON_STARTUP</code> Scan for tools on startup <code>TRUE</code> <code>AWESOME_MCP_CACHE_TTL</code> Schema cache TTL in seconds <code>60</code> <code>AWESOME_MCP_API_PREFIX</code> Custom API prefix <code>/tools</code> <p>You can set these in your environment or <code>.env</code> file.</p>"},{"location":"getting-started/quickstart/","title":"Quickstart Guide","text":"<p>Get up and running with Awesome MCP FastAPI in minutes.</p>"},{"location":"getting-started/quickstart/#installation","title":"Installation","text":"<p>First, install the package using your preferred method:</p> <pre><code># Using uv (recommended)\ngit clone https://github.com/MR-GREEN1337/awesome-mcp-fastapi.git\ncd awesome-mcp-fastapi\nuv venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\nuv pip install -e .\n\n# Using pip with requirements.txt\ngit clone https://github.com/MR-GREEN1337/awesome-mcp-fastapi.git\ncd awesome-mcp-fastapi\npip install -r requirements.txt\n</code></pre>"},{"location":"getting-started/quickstart/#basic-setup","title":"Basic Setup","text":"<p>Create a new FastAPI application with Awesome MCP FastAPI:</p> <pre><code>from fastapi import FastAPI\nfrom src.utils.tools import auto_tool, bind_app_tools\n\n# Create FastAPI app\napp = FastAPI(\n    title=\"My AI Tools API\",\n    description=\"API with tools for AI models\",\n    version=\"0.1.0\"\n)\n\n# Connect the tool registry to the app\nbind_app_tools(app)\n\n# Now you can create tools!\n</code></pre>"},{"location":"getting-started/quickstart/#creating-your-first-tool","title":"Creating Your First Tool","text":"<p>Let's create a simple calculator tool:</p> <pre><code>@auto_tool(\n    name=\"calculator\",\n    description=\"Perform basic arithmetic operations\",\n    tags=[\"math\"]\n)\n@app.post(\"/api/calculator\")\nasync def calculator(operation: str, a: float, b: float):\n    \"\"\"\n    Perform basic arithmetic operations.\n\n    Parameters:\n    - operation: The operation to perform (add, subtract, multiply, divide)\n    - a: First number\n    - b: Second number\n\n    Returns:\n    The result of the operation\n    \"\"\"\n    if operation == \"add\":\n        return {\"result\": a + b}\n    elif operation == \"subtract\":\n        return {\"result\": a - b}\n    elif operation == \"multiply\":\n        return {\"result\": a * b}\n    elif operation == \"divide\":\n        if b == 0:\n            return {\"error\": \"Cannot divide by zero\"}\n        return {\"result\": a / b}\n    else:\n        return {\"error\": f\"Unknown operation: {operation}\"}\n</code></pre>"},{"location":"getting-started/quickstart/#using-pydantic-models","title":"Using Pydantic Models","text":"<p>For more complex tools, use Pydantic models for better validation and documentation:</p> <pre><code>from pydantic import BaseModel, Field\n\nclass WeatherRequest(BaseModel):\n    \"\"\"Parameters for weather forecast request\"\"\"\n    location: str = Field(..., description=\"City name or coordinates\", example=\"New York\")\n    days: int = Field(5, description=\"Number of days to forecast\", ge=1, le=10)\n    include_hourly: bool = Field(False, description=\"Include hour-by-hour forecast\")\n\nclass WeatherForecast(BaseModel):\n    \"\"\"Weather forecast response\"\"\"\n    location: str = Field(..., description=\"Location of the forecast\")\n    current_temp: float = Field(..., description=\"Current temperature in Celsius\")\n    forecasts: list = Field(..., description=\"Daily forecasts\")\n\n@auto_tool(\n    name=\"weather-forecast\",\n    description=\"Get weather forecast for a location\",\n    tags=[\"weather\", \"forecast\"]\n)\n@app.post(\"/api/weather/forecast\", response_model=WeatherForecast)\nasync def weather_forecast(request: WeatherRequest):\n    \"\"\"\n    Get a weather forecast for the specified location.\n\n    Returns current conditions and a daily forecast.\n    \"\"\"\n    # In a real implementation, this would call a weather API\n    return WeatherForecast(\n        location=request.location,\n        current_temp=22.5,\n        forecasts=[\n            {\"day\": \"Monday\", \"temp\": 23.0, \"condition\": \"Sunny\"},\n            {\"day\": \"Tuesday\", \"temp\": 21.5, \"condition\": \"Partly Cloudy\"},\n            # More forecasts...\n        ]\n    )\n</code></pre>"},{"location":"getting-started/quickstart/#running-your-server","title":"Running Your Server","text":"<p>Run your server using Uvicorn:</p> <pre><code>uvicorn src.main:app --reload\n</code></pre> <p>Your FastAPI application will be available at http://localhost:8000, with the following endpoints:</p> <ul> <li>OpenAPI Documentation: http://localhost:8000/docs</li> <li>ReDoc Documentation: http://localhost:8000/redoc</li> <li>MCP Tool List: http://localhost:8000/tools/all</li> </ul>"},{"location":"getting-started/quickstart/#testing-your-tools","title":"Testing Your Tools","text":"<p>You can test your tools directly using the FastAPI Swagger UI at <code>/docs</code>, or using an MCP client like Claude.</p>"},{"location":"getting-started/quickstart/#testing-with-curl","title":"Testing with curl","text":"<pre><code>curl -X POST \"http://localhost:8000/api/calculator\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"operation\": \"add\", \"a\": 5, \"b\": 3}'\n</code></pre>"},{"location":"getting-started/quickstart/#testing-with-python","title":"Testing with Python","text":"<pre><code>import requests\n\nresponse = requests.post(\n    \"http://localhost:8000/api/calculator\",\n    json={\"operation\": \"add\", \"a\": 5, \"b\": 3}\n)\n\nprint(response.json())  # {\"result\": 8}\n</code></pre>"},{"location":"getting-started/quickstart/#adding-authentication","title":"Adding Authentication","text":"<p>Secure your tools with FastAPI's authentication:</p> <pre><code>from fastapi import Depends, HTTPException, status\nfrom fastapi.security import APIKeyHeader\n\n# Define API key scheme\nAPI_KEY = \"your-secret-key\"\napi_key_header = APIKeyHeader(name=\"X-API-Key\")\n\ndef verify_api_key(api_key: str = Depends(api_key_header)):\n    if api_key != API_KEY:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid API Key\"\n        )\n    return api_key\n\n@auto_tool(\n    name=\"secured-tool\",\n    description=\"This tool requires authentication\",\n    tags=[\"secured\"]\n)\n@app.post(\"/api/secured\")\nasync def secured_endpoint(data: str, api_key: str = Depends(verify_api_key)):\n    \"\"\"A secured endpoint that requires authentication.\"\"\"\n    return {\"message\": f\"Secured operation completed on: {data}\"}\n</code></pre>"}]}